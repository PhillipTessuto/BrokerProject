BROKER SCHEMA service.vivo.com.br.esboss.legacy

DECLARE ns186 NAMESPACE 'http://www.gvt.com.br/ServiceManagement/ServiceOrderManagement/ServiceConfigurationManagement/notifyServiceConfigurationEntities';
DECLARE ns179 NAMESPACE 'http://www.gvt.com.br/ServiceManagement/ServiceOrderManagement/ServiceConfigurationManagement/ServiceConfigurationManagement/';


CREATE COMPUTE MODULE LegacyGVTServiceActivationRequest_setSendToLegado
	DECLARE WEBSERVICE_URL 			EXTERNAL CHARACTER ;
	DECLARE WEBSERVICE_TIMEOUT_MS	EXTERNAL INTEGER;
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE envRef REFERENCE TO Environment.Variables;
		
		
		SET OutputRoot.Properties					= envRef.originalMessage.Properties;
		SET OutputRoot.Properties.CodedCharSetId	= '1208';
		SET OutputLocalEnvironment.Destination.SOAP.Request.UserContext 					= envRef.originalMessage.MQMD.MsgId;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Operation 						= envRef.operation;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.WebServiceURL 	= WEBSERVICE_URL;
		SET OutputLocalEnvironment.Destination.SOAP.Request.Transport.HTTP.TimeoutMillis 	= WEBSERVICE_TIMEOUT_MS;
		
		CASE(envRef.operation)
		WHEN 'notifyServiceConfiguration' THEN
			CALL mapNotifyServiceConfiguration();
		ELSE
			SET envRef.operation = 'Operacao - '||envRef.operation  || ' - Solicitada Invalida!';
			THROW EXCEPTION MESSAGE 4 VALUES (envRef.operation);
		END CASE;  
		 
		--Monitoring
		SET envRef.statusCode 			= '0';
		SET envRef.statusDescription 	= 'SUCCESS';		
				
		RETURN TRUE;
	END;

	CREATE PROCEDURE mapNotifyServiceConfiguration()
	BEGIN
		DECLARE envRef REFERENCE TO Environment.Variables;		
		DECLARE legRequest REFERENCE TO InputRoot.XMLNSC.*:LegacyGVTServiceActivation.*:LegacyGVTNotify.*:LegacyGVTNotifyRequest;
		DECLARE status CHARACTER '';
		
		IF(UPPER(legRequest.*:originSystem) = 'SIGRES' )THEN
			CASE
			WHEN (CAST(legRequest.*:Result.*:Code AS CHARACTER)) = '0' THEN
				SET status = 'SUCCESS';
				
			WHEN (CAST(legRequest.*:Result.*:Code AS CHARACTER))  IN('1','5','7','9','11','12','13') THEN
				SET status = 'FATAL_ERROR';
				
			WHEN (CAST(legRequest.*:Result.*:Code AS CHARACTER)) IN('2','3','4','6','8','10','14') THEN
				SET status = 'BUSINESS_ERROR';
			ELSE		
				SET status = 'FATAL_ERROR';
			END CASE; 			
		ELSE--se vier do GVOX
			CASE(CAST( legRequest.*:Result.*:Code AS CHARACTER))
			WHEN '0' THEN
				SET status = 'SUCCESS';
			WHEN '1' THEN
				SET status = 'FATAL_ERROR';
			WHEN '2' THEN
				SET status = 'BUSINESS_ERROR';
			ELSE
				SET status = 'FATAL_ERROR';	
			END CASE;
		END IF; 
		
		CREATE FIELD OutputRoot.SOAP.Body.ns179:notifyServiceConfigurationIn;
		DECLARE request REFERENCE TO OutputRoot.SOAP.Body.ns179:notifyServiceConfigurationIn;
		
		SET request.ns186:serviceOrder.ns186:ID						= legRequest.ns:ServiceOrderNumber;
		SET request.ns186:serviceOrder.ns186:serviceOrderType		= legRequest.ns:actionType;
		
		SET request.ns186:fallout.ns186:id					= legRequest.ns:Result.ns:Code;
		SET request.ns186:fallout.ns186:description			= legRequest.ns:Result.ns:Description;
		
		SET request.ns186:fallout.ns186:status				= status;
		SET request.ns186:fallout.ns186:originatingSystem	= legRequest.ns:originSystem;  
		
		
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
